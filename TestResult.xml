<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="c:\Development\NSpec\NSpecSpecs\bin\Debug\NSpecSpecs.dll" total="199" errors="0" failures="0" not-run="14" inconclusive="0" ignored="14" skipped="0" invalid="0" date="2012-06-23" time="15:01:31">
  <environment nunit-version="2.6.0.12051" clr-version="2.0.50727.5456" os-version="Microsoft Windows NT 6.1.7601 Service Pack 1" platform="Win32NT" cwd="c:\Development\NSpec" machine-name="KODOTAI" user="Amir" user-domain="Kodotai" />
  <culture-info current-culture="en-US" current-uiculture="en-US" />
  <test-suite type="Assembly" name="c:\Development\NSpec\NSpecSpecs\bin\Debug\NSpecSpecs.dll" executed="True" result="Success" success="True" time="1.007" asserts="0">
    <results>
      <test-suite type="Namespace" name="NSpecNUnit" executed="True" result="Success" success="True" time="0.576" asserts="0">
        <results>
          <test-suite type="TestFixture" name="describe_Context" executed="True" result="Success" success="True" time="0.016" asserts="0">
            <results>
              <test-case name="NSpecNUnit.describe_Context.it_should_make_a_sentence_from_underscored_context_names" executed="True" result="Success" success="True" time="0.011" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="describe_Example" executed="True" result="Success" success="True" time="0.003" asserts="0">
            <categories>
              <category name="Example" />
            </categories>
            <results>
              <test-case name="NSpecNUnit.describe_Example.should_be_marked_as_pending_if_any_parent_context_is_pending" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecNUnit.describe_Example.should_be_marked_as_pending_if_parent_context_is_pending" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecNUnit.describe_Example.should_concatenate_its_contexts_name_into_a_full_name" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="trimming_unexecuted_contexts_one_level_deep" executed="True" result="Success" success="True" time="0.017" asserts="0">
            <results>
              <test-case name="NSpecNUnit.trimming_unexecuted_contexts_one_level_deep.it_contains_context_with_example" executed="True" result="Success" success="True" time="0.016" asserts="2" />
              <test-case name="NSpecNUnit.trimming_unexecuted_contexts_one_level_deep.it_doesnt_contain_empty_context" executed="True" result="Success" success="True" time="0.001" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="trimming_unexecuted_contexts_two_levels_deep" executed="True" result="Success" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="NSpecNUnit.trimming_unexecuted_contexts_two_levels_deep.it_keeps_all_contexts_if_examples_exists_at_level_2" executed="True" result="Success" success="True" time="0.001" asserts="3" />
              <test-case name="NSpecNUnit.trimming_unexecuted_contexts_two_levels_deep.it_removes_all_contexts_if_no_child_context_has_examples" executed="True" result="Success" success="True" time="0.000" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="when_building_contexts" executed="True" result="Success" success="True" time="0.400" asserts="0">
            <results>
              <test-suite type="TestFixture" name="describe_ContextBuilder" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
              <test-suite type="TestFixture" name="describe_second_order_inheritance" executed="True" result="Success" success="True" time="0.347" asserts="0">
                <categories>
                  <category name="ContextBuilder" />
                </categories>
                <results>
                  <test-case name="NSpecNUnit.when_building_contexts.describe_second_order_inheritance.the_next_context_should_be_derived_spec" executed="True" result="Success" success="True" time="0.344" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.describe_second_order_inheritance.the_next_next_context_should_be_derived_spec" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.describe_second_order_inheritance.the_root_context_should_be_base_spec" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_building_class_and_method_contexts_with_tag_attributes" executed="True" result="Success" success="True" time="0.023" asserts="0">
                <results>
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_class_and_method_contexts_with_tag_attributes.it_should_tag_class_context" executed="True" result="Success" success="True" time="0.021" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_class_and_method_contexts_with_tag_attributes.it_should_tag_method_context" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_building_contexts" executed="True" result="Success" success="True" time="0.016" asserts="0">
                <results>
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_contexts.it_should_have_the_sibling" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_contexts.it_should_only_have_the_parent_once" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_contexts.should_get_specs_from_specFinder" executed="True" result="Success" success="True" time="0.007" asserts="0" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_contexts.the_parent_should_have_the_child_context" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_contexts.the_primary_context_should_be_parent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_building_method_contexts" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_method_contexts.it_should_add_the_public_method_as_a_sub_context" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_method_contexts.it_should_disregard_method_called_act_each" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_method_contexts.it_should_disregard_method_called_before_each" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_building_method_contexts.it_should_not_create_a_sub_context_for_the_private_method" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_finding_method_level_examples" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NSpecNUnit.when_building_contexts.when_finding_method_level_examples.should_exclude_methods_that_start_with_ITs_from_child_context" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_finding_method_level_examples.should_find_method_level_example_if_the_method_name_starts_with_the_word_IT" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                  <test-case name="NSpecNUnit.when_building_contexts.when_finding_method_level_examples.should_find_method_level_example_if_the_method_starts_with_SPECIFY" executed="True" result="Success" success="True" time="0.001" asserts="0" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_counting_failures" executed="True" result="Success" success="True" time="0.001" asserts="0">
            <results>
              <test-case name="NSpecNUnit.when_counting_failures.given_nested_contexts_and_the_child_has_a_failure" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_creating_act_contexts_for_derived_class" executed="True" result="Success" success="True" time="0.009" asserts="0">
            <results>
              <test-case name="NSpecNUnit.when_creating_act_contexts_for_derived_class.should_run_the_acts_in_the_right_order" executed="True" result="Success" success="True" time="0.008" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_creating_before_contexts_for_derived_class" executed="True" result="Success" success="True" time="0.001" asserts="0">
            <results>
              <test-case name="NSpecNUnit.when_creating_before_contexts_for_derived_class.should_run_the_befores_in_the_proper_order" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_creating_contexts_for_derived_classes" executed="True" result="Success" success="True" time="0.002" asserts="0">
            <results>
              <test-case name="NSpecNUnit.when_creating_contexts_for_derived_classes.it_should_have_the_child_as_a_context" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecNUnit.when_creating_contexts_for_derived_classes.the_root_context_should_be_the_parent" executed="True" result="Success" success="True" time="0.001" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_filtering_specs" executed="True" result="Success" success="True" time="0.026" asserts="0">
            <categories>
              <category name="SpecFinder" />
            </categories>
            <results>
              <test-case name="NSpecNUnit.when_filtering_specs.it_should_filter_in" executed="True" result="Success" success="True" time="0.023" asserts="1" />
              <test-case name="NSpecNUnit.when_filtering_specs.it_should_filter_out" executed="True" result="Success" success="True" time="0.002" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_finding_specs_based_on_regex" executed="True" result="Success" success="True" time="0.005" asserts="0">
            <categories>
              <category name="SpecFinder" />
            </categories>
            <results>
              <test-case name="NSpecNUnit.when_finding_specs_based_on_regex.it_should_find_all_specs_if_regex_is_not_specified" executed="True" result="Success" success="True" time="0.001" asserts="3" />
              <test-case name="NSpecNUnit.when_finding_specs_based_on_regex.it_should_find_distinct_specs" executed="True" result="Success" success="True" time="0.001" asserts="4" />
              <test-case name="NSpecNUnit.when_finding_specs_based_on_regex.it_should_find_specs_for_derived_class_and_include_base_class" executed="True" result="Success" success="True" time="0.001" asserts="5" />
              <test-case name="NSpecNUnit.when_finding_specs_based_on_regex.it_should_find_specs_that_contain_namespace" executed="True" result="Success" success="True" time="0.000" asserts="3" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_parsing_expressions" executed="True" result="Success" success="True" time="0.073" asserts="0">
            <categories>
              <category name="Example" />
            </categories>
            <results>
              <test-case name="NSpecNUnit.when_parsing_expressions.should_clear_quotes" executed="True" result="Success" success="True" time="0.072" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="without_filtering" executed="True" result="Success" success="True" time="0.007" asserts="0">
            <categories>
              <category name="SpecFinder" />
            </categories>
            <results>
              <test-case name="NSpecNUnit.without_filtering.it_should_exclude_classes_that_do_not_inherit_from_nspec" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecNUnit.without_filtering.it_should_exclude_classes_that_have_no_void_methods" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecNUnit.without_filtering.it_should_exclude_classes_that_inherit_from_nspec_but_have_no_parameterless_methods" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecNUnit.without_filtering.it_should_get_types_from_reflection" executed="True" result="Success" success="True" time="0.002" asserts="0" />
              <test-case name="NSpecNUnit.without_filtering.it_should_include_classes_that_implement_nspec_and_have_paramterless_void_methods" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="NSpecSpecs" executed="True" result="Success" success="True" time="0.416" asserts="0">
        <results>
          <test-suite type="TestFixture" name="describe_cecil" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
            <results>
              <test-case name="NSpecSpecs.describe_cecil.it_reflects_methods" executed="False" result="Ignored">
                <reason>
                  <message><![CDATA[]]></message>
                </reason>
              </test-case>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="describe_ContextCollection" executed="True" result="Success" success="True" time="0.003" asserts="0">
            <categories>
              <category name="ContextCollection" />
            </categories>
            <results>
              <test-case name="NSpecSpecs.describe_ContextCollection.should_aggregate_examples" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_ContextCollection.should_aggregate_failures" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_ContextCollection.should_aggregate_pendings" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_ContextCollection.should_trim_skipped_contexts" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="describe_DomainExtensions" executed="True" result="Success" success="True" time="0.015" asserts="0">
            <categories>
              <category name="DomainExtensions" />
            </categories>
            <results>
              <test-suite type="ParameterizedTest" name="should_build_immediate_abstract_class_chain" executed="True" result="Success" success="True" time="0.005" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo2,System.Type[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo4,System.Type[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo5,System.Type[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo6,System.Type[])" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo3,System.Type[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_build_immediate_abstract_class_chain(NSpecSpecs.describe_DomainExtensions+Foo1,System.Type[])" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_disregard_methods_from_concrete_ancestor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_disregard_methods_from_concrete_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_disregard_methods_from_indirect_abstract_ancestor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_disregard_methods_with_out_underscores" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-suite type="ParameterizedTest" name="should_generate_pretty_type_names" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_generate_pretty_type_names(NSpecSpecs.describe_DomainExtensions+Bar11,&quot;Bar1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_generate_pretty_type_names(NSpecSpecs.describe_DomainExtensions+Bar21,&quot;Bar2&lt;Bar1&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_generate_pretty_type_names(NSpecSpecs.describe_DomainExtensions+Bar31,&quot;Bar3&lt;Bar1, Bar1&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.describe_DomainExtensions.should_generate_pretty_type_names(NSpecSpecs.describe_DomainExtensions+Bar32,&quot;Bar3&lt;Bar1, Bar2&lt;Bar1&gt;&gt;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_include_direct_private_methods" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_include_direct_public_methods" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_include_methods_from_abstract_parent" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_DomainExtensions.should_include_methods_from_direct_abstract_ancestor" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="describe_output" executed="True" result="Success" success="True" time="0.014" asserts="0">
            <results>
              <test-case name="NSpecSpecs.describe_output.describe_regex_replace" executed="True" result="Success" success="True" time="0.006" asserts="1" />
              <test-suite type="ParameterizedTest" name="output_verification" executed="False" result="Ignored">
                <reason>
                  <message><![CDATA[]]></message>
                </reason>
                <results>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_class_level_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_pending_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_specifications_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_before_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_contexts_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(SampleSpecs.Bug.describe_context_stack_trace_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(my_first_spec_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_expected_exception_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(given_the_sequence_continues_with_2_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_helpers_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                  <test-case name="NSpecSpecs.describe_output.output_verification(describe_batman_sound_effects_as_text_output)" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="describe_parsing_tags" executed="True" result="Success" success="True" time="0.004" asserts="0">
            <results>
              <test-case name="NSpecSpecs.describe_parsing_tags.parses_multiple_tags" executed="True" result="Success" success="True" time="0.000" asserts="3" />
              <test-case name="NSpecSpecs.describe_parsing_tags.parses_multiple_tags_filters" executed="True" result="Success" success="True" time="0.000" asserts="6" />
              <test-case name="NSpecSpecs.describe_parsing_tags.parses_single_exclude_tag_filters" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.describe_parsing_tags.parses_single_include_tag_filters" executed="True" result="Success" success="True" time="0.001" asserts="1" />
              <test-case name="NSpecSpecs.describe_parsing_tags.parses_single_tag" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="Namespace" name="describe_RunningSpecs" executed="True" result="Success" success="True" time="0.261" asserts="0">
            <results>
              <test-suite type="TestFixture" name="describe_abstract_class_examples" executed="True" result="Success" success="True" time="0.014" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_examples.abstracts_should_not_be_added_as_class_contexts" executed="True" result="Success" success="True" time="0.009" asserts="7" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_examples.derived_concrete_class_does_not_contain_the_examples_from_the_abtract_class" executed="True" result="Success" success="True" time="0.003" asserts="7" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_examples.examples_of_abtract_classes_are_included_in_concrete_class" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_abstract_class_execution_order" executed="True" result="Success" success="True" time="0.039" asserts="0">
                <results>
                  <test-suite type="ParameterizedTest" name="act_eaches_should_run_in_the_correct_order" description="act_each() in concrete classes affects base abstracts" executed="True" result="Success" success="True" time="0.013" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.act_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_inherits_another_abstract_class&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.act_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_directly_inherits_from_concrete_class&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.act_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_concrete_class_that_inherits_abstract&quot;,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.act_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_concrete_class_that_inherits_an_abstract_class_with_deep_inheritance_chain&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.act_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_abtract_class&quot;,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="after_eaches_should_run_in_the_correct_order" description="after_each() in concrete classes affects base abstracts" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.after_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_concrete_class_that_inherits_abstract&quot;,&quot;21&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.after_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_directly_inherits_from_concrete_class&quot;,&quot;54321&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.after_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_inherits_another_abstract_class&quot;,&quot;54321&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.after_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_abtract_class&quot;,&quot;21&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.after_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_concrete_class_that_inherits_an_abstract_class_with_deep_inheritance_chain&quot;,&quot;54321&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="before_eaches_should_run_in_the_correct_order" description="before_each() in concrete classes affects base abstracts" executed="True" result="Success" success="True" time="0.011" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.before_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_abtract_class&quot;,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.before_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_inherits_another_abstract_class&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.before_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_directly_inherits_from_concrete_class&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.006" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.before_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_concrete_class_that_inherits_an_abstract_class_with_deep_inheritance_chain&quot;,&quot;12345&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.before_eaches_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_concrete_class_that_inherits_abstract&quot;,&quot;12&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="ParameterizedTest" name="execution_should_run_in_the_correct_order" executed="True" result="Success" success="True" time="0.006" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.execution_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_abtract_class&quot;,&quot;b1b2ac1ac2i1af2af1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.execution_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class2,&quot;example_in_concrete_class_that_inherits_abstract&quot;,&quot;b1b2ac1ac2i2af2af1&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.execution_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_inherits_another_abstract_class&quot;,&quot;b1b2b3b4b5ac1ac2ac3ac4ac5i4af5af4af3af2af1&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.execution_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_concrete_class_that_inherits_an_abstract_class_with_deep_inheritance_chain&quot;,&quot;b1b2b3b4b5ac1ac2ac3ac4ac5i5af5af4af3af2af1&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order.execution_should_run_in_the_correct_order(NSpecSpecs.describe_RunningSpecs.describe_abstract_class_execution_order+Class5,&quot;example_in_abstract_class_that_directly_inherits_from_concrete_class&quot;,&quot;b1b2b3b4b5ac1ac2ac3ac4ac5i3af5af4af3af2af1&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_class_level_after" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_after.afters_are_run_in_the_correct_order" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_after.afters_are_run_in_the_correct_order_when_abstract_middle_classes_are_present" executed="True" result="Success" success="True" time="0.002" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_class_level_afterAll" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_afterAll.after_alls_are_run_in_the_correct_order" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_afterAll.after_alls_are_run_in_the_correct_order_when_abstract_middle_classes_are_present" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_class_level_before_for_abstract_class" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_before_for_abstract_class.it_runs_examples_from_abstract_class_as_if_they_belonged_to_concrete_class" executed="True" result="Success" success="True" time="0.002" asserts="11" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_class_level_before_for_abstract_class.should_run_example_within_a_sub_context_in_a_derived_class" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_context_level_afterAll" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_context_level_afterAll.should_execute_after_all_only_for_each_context_level" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_context_level_beforeAll" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_context_level_beforeAll.should_execute_before_all_only_for_each_context_level" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_fail_fast" executed="True" result="Success" success="True" time="0.009" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_fail_fast.only_executed_examples_are_printed" executed="True" result="Success" success="True" time="0.007" asserts="6" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_fail_fast.only_two_examples_are_executed_one_will_be_a_failure" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_Levels" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Levels.and_nested_contexts_one_more_deep" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Levels.classes_that_directly_inherit_nspec_have_level_1" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Levels.method_level_contexts_have_one_level_deeper" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_Levels_Inheritance" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Levels_Inheritance.child_class_is_level_2" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Levels_Inheritance.parent_class_is_level_1" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_LiveFormatter_with_context_filter" executed="True" result="Success" success="True" time="0.124" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_skips_contexts_that_were_not_included" executed="True" result="Success" success="True" time="0.042" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_skips_contexts_without_examples" executed="True" result="Success" success="True" time="0.015" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_skips_examples_whose_contexts_were_not_included" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_writes_context_with_grandchild_examples" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_writes_contexts_with_examples" executed="True" result="Success" success="True" time="0.014" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_writes_the_example" executed="True" result="Success" success="True" time="0.012" asserts="2" />
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_LiveFormatter_with_context_filter.it_writes_the_pending_example" executed="True" result="Success" success="True" time="0.011" asserts="2" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_Method_Invocation_Sequence" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.describe_RunningSpecs.describe_Method_Invocation_Sequence.it_runs_things_in_a_strange_order" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="Namespace" name="Exceptions" executed="True" result="Success" success="True" time="0.037" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="describe_expected_exception" executed="True" result="Success" success="True" time="0.008" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.fails_if_expected_exception_not_thrown" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.fails_if_wrong_error_message_is_returned" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.fails_if_wrong_exception_thrown" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.should_be_three_failures" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.throws_expected_exception" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception.throws_expected_exception_with_error_message_Testing" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="describe_expected_exception_in_act" executed="True" result="Success" success="True" time="0.007" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.fails_if_no_exception_thrown" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.fails_if_wrong_error_message_is_returned" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.fails_if_wrong_exception_thrown" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.should_be_two_failures" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.threw_expected_exception_in_act" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_expected_exception_in_act.threw_the_exception_in_act_with_the_proper_error_message" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="describe_unexpected_exception_in_act_and_in_example" executed="True" result="Success" success="True" time="0.001" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_unexpected_exception_in_act_and_in_example.should_report_both_method_level_failure_and_act_level_failure" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="describe_unexpected_exception_in_act_but_not_example" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.describe_unexpected_exception_in_act_but_not_example.should_report_both_method_level_failure_and_act_level_failure" executed="True" result="Success" success="True" time="0.002" asserts="3" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_act_contains_exception" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_act_contains_exception.it_should_fail_all_examples_in_act" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_act_contains_exception.the_example_level_failure_should_indicate_a_context_failure" executed="True" result="Success" success="True" time="0.000" asserts="6" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_after_contains_exception" executed="True" result="Success" success="True" time="0.004" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_after_contains_exception.examples_with_only_after_failure_should_only_fail_because_of_after" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_after_contains_exception.it_should_throw_exception_from_act_not_from_after" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_after_contains_exception.the_example_level_failure_should_indicate_a_context_failure" executed="True" result="Success" success="True" time="0.001" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_before_contains_exception" executed="True" result="Success" success="True" time="0.003" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_before_contains_exception.it_should_fail_all_examples_in_before" executed="True" result="Success" success="True" time="0.001" asserts="7" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_before_contains_exception.it_should_throw_exception_from_before_not_from_act" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_before_contains_exception.the_example_level_failure_should_indicate_a_context_failure" executed="True" result="Success" success="True" time="0.000" asserts="9" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="when_method_level_before_contains_exception" executed="True" result="Success" success="True" time="0.002" asserts="0">
                    <categories>
                      <category name="RunningSpecs" />
                    </categories>
                    <results>
                      <test-case name="NSpecSpecs.describe_RunningSpecs.Exceptions.when_method_level_before_contains_exception.the_example_should_fail_with_ContextFailureException" executed="True" result="Success" success="True" time="0.002" asserts="2" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="specifying_new_before_convension" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0">
            <categories>
              <category name="Conventions" />
            </categories>
          </test-suite>
          <test-suite type="TestFixture" name="when_comparing_two_objects" executed="True" result="Success" success="True" time="0.018" asserts="0">
            <results>
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_datetimes_should_be_able_to_assert_on_is_close_to_with_tolerance" executed="True" result="Success" success="True" time="0.010" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_doubles_should_be_able_to_assert_on_is_close_to_with_custom_tolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_doubles_should_be_able_to_assert_on_is_close_to_with_default_tolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_floats_should_be_able_to_assert_on_is_close_to_with_custom_tolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_floats_should_be_able_to_assert_on_is_close_to_with_default_tolerance" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.given_timespans_should_be_able_to_assert_on_is_close_to_with_tolerance" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.should_be_able_to_assert_on_greater_or_equal_to" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.should_be_able_to_assert_on_greater_than" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.should_be_able_to_assert_on_less_or_equal_to" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_comparing_two_objects.should_be_able_to_assert_on_less_than" executed="True" result="Success" success="True" time="0.001" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_determining_act_methods" executed="True" result="Success" success="True" time="0.002" asserts="0">
            <categories>
              <category name="DefaultConvention" />
            </categories>
            <results>
              <test-case name="NSpecSpecs.when_determining_act_methods.should_ignore_case" executed="True" result="Success" success="True" time="0.001" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_act_methods.should_match_act_each" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_determining_before_methods" executed="True" result="Success" success="True" time="0.001" asserts="0">
            <categories>
              <category name="DefaultConvention" />
            </categories>
            <results>
              <test-case name="NSpecSpecs.when_determining_before_methods.should_ignore_case" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_before_methods.should_match_before_each" executed="True" result="Success" success="True" time="0.000" asserts="2" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_determining_context_methods" executed="True" result="Success" success="True" time="0.001" asserts="0">
            <categories>
              <category name="DefaultConvention" />
            </categories>
            <results>
              <test-case name="NSpecSpecs.when_determining_context_methods.should_be_match_describe_a_specification" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.when_determining_context_methods.should_ignore_case" executed="True" result="Success" success="True" time="0.000" asserts="1" />
              <test-case name="NSpecSpecs.when_determining_context_methods.should_not_match_methods_dont_contain_underscores" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_determining_example_methods" executed="True" result="Success" success="True" time="0.003" asserts="0">
            <categories>
              <category name="DefaultConvention" />
            </categories>
            <results>
              <test-case name="NSpecSpecs.when_determining_example_methods.should_ignore_case_when_matching_it" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_example_methods.should_ignore_case_when_matching_specify" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_example_methods.should_match_it" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_example_methods.should_match_specify" executed="True" result="Success" success="True" time="0.000" asserts="2" />
              <test-case name="NSpecSpecs.when_determining_example_methods.should_not_match_IterationShould" executed="True" result="Success" success="True" time="0.000" asserts="1" />
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="when_find_before" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
            <categories>
              <category name="Conventions" />
            </categories>
          </test-suite>
          <test-suite type="Namespace" name="WhenRunningSpecs" executed="True" result="Success" success="True" time="0.067" asserts="0">
            <results>
              <test-suite type="TestFixture" name="describe_action_indexer_add_operator" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_action_indexer_add_operator.should_contain_pending_test" executed="True" result="Success" success="True" time="0.000" asserts="2" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_action_indexer_add_operator.spec_name_should_reflect_name_specified_in_ActionRegister" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_class_level_before" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_class_level_before.should_run_class_level_before_then_method_level_before" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_class_level_before.should_run_example_within_a_sub_context" executed="True" result="Success" success="True" time="0.000" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_context_level_tagging" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_context_level_tagging.has_three_tags_and_the_default" executed="True" result="Success" success="True" time="0.001" asserts="14" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_context_level_tagging.is_tagged_with_mytag" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_context_level_tagging.it_only_contains_default_tag" executed="True" result="Success" success="True" time="0.001" asserts="6" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_context_level_tagging.nested_contexts_should_inherit_the_tag" executed="True" result="Success" success="True" time="0.001" asserts="8" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_context_level_tagging.nested_examples_should_inherit_the_tag" executed="True" result="Success" success="True" time="0.000" asserts="8" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_example" executed="True" result="Success" success="True" time="0.004" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example.execution_status_changes_after_run" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example.passing_status_is_not_passed_when_it_fails" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example.passing_status_is_passed_when_it_succeeds" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_example_level_tagging" executed="True" result="Success" success="True" time="0.003" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example_level_tagging.has_three_tags_and_default_class_tag" executed="True" result="Success" success="True" time="0.001" asserts="13" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example_level_tagging.is_tagged_with_at_mytag" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_example_level_tagging.it_only_has_the_default_class_tag" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_implicit_befores" executed="True" result="Inconclusive" success="False" time="0.001" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_implicit_befores.should_give_each_specify_a_new_instance_of_spec" executed="False" result="Ignored">
                    <reason>
                      <message><![CDATA[]]></message>
                    </reason>
                  </test-case>
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_it_behaviour_in_xcontext" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_it_behaviour_in_xcontext.the_example_should_be_pending" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_method_level_befores" executed="True" result="Success" success="True" time="0.002" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_befores.it_should_set_before_on_sub_context" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_befores.it_should_set_method_level_before" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_method_level_examples" executed="True" result="Success" success="True" time="0.018" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.should_execute_first_example" executed="True" result="Success" success="True" time="0.005" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.should_execute_last_example" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.the_class_context_should_contain_a_class_level_example" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.the_last_example_should_be_failing" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.the_stack_trace_for_last_example_should_be_the_the_original_stack_trace" executed="True" result="Success" success="True" time="0.006" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_method_level_examples.there_should_be_only_one_failure" executed="True" result="Success" success="True" time="0.003" asserts="3" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_tag_filtering" executed="True" result="Success" success="True" time="0.013" asserts="0">
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.classes_are_automatically_tagged_with_class_name" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.excludes_examples_not_run" executed="True" result="Success" success="True" time="0.002" asserts="10" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.excludes_tag" executed="True" result="Success" success="True" time="0.001" asserts="5" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.excludes_tag_as_class_attribute" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.excludes_tag_as_method_attribute" executed="True" result="Success" success="True" time="0.000" asserts="5" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.includes_and_excludes_tags" executed="True" result="Success" success="True" time="0.001" asserts="4" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.includes_tag" executed="True" result="Success" success="True" time="0.001" asserts="3" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.includes_tag_as_class_attribute" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.includes_tag_as_method_attribute" executed="True" result="Success" success="True" time="0.001" asserts="2" />
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_tag_filtering.includes_tag_for_method_as_method_attribute" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_todo" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
              <test-suite type="TestFixture" name="describe_xcontext" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_xcontext.it_should_not_run_befores_on_pending_context" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="describe_xdescribe" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.describe_xdescribe.the_example_should_be_pending" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="using_todo" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.using_todo.example_should_be_pending" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="using_todo_with_throwing_before" executed="True" result="Success" success="True" time="0.000" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.using_todo_with_throwing_before.example_should_not_fail_but_be_pending" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="using_xit" executed="True" result="Success" success="True" time="0.001" asserts="0">
                <categories>
                  <category name="RunningSpecs" />
                </categories>
                <results>
                  <test-case name="NSpecSpecs.WhenRunningSpecs.using_xit.example_should_be_pending" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                </results>
              </test-suite>
              <test-suite type="TestFixture" name="when_running_specs" executed="True" result="Inconclusive" success="False" time="0.000" asserts="0" />
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>